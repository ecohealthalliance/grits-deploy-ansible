---
# This script will do the following:
# 1. Provision a new AWS instance to train the classifier on.
# 2. Train a new classifier classifier using the specified database dump and grits-api branch.
# 3. Setup a version of GRITS on the new AWS instance the classifier can be tested on.
#    Remember to terminate it when you are done testing.
# 4. Save the classifier to the classifier-data bucket in the classifiers folder using the timestamp as a name.
#    To update the classifier on another grits instance, run the grits-api play with the classifier_name varaiable set to the new classifier's name.
#    If classifier_id is not specified the newest classifier is used.
# 5. Automatically shutdown the instance to prevent accidental overuse.
# To run it use this command:
# sudo ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook train-classifier.yml --vault-password-file grits_vault_password --private-key grits-prod.pem
- hosts: localhost
  sudo: yes
  vars:
    - instance_size: "m3.2xlarge"
    - celery_workers: 8
    - aws_security_group: grits-dev
    - aws_instance_key_name: grits-prod
  tasks:
    - name: Install Python PIP
      apt: pkg=python-pip state=latest
      tags:
        - always
    - name: Install boto via PIP
      pip: name=boto state=latest
      tags:
        - always
    - name: Install AWS CLI
      pip: name=awscli state=latest
      tags:
        - always
    - name: Provision an AWS instance
      ec2:
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        group: "{{ aws_security_group }}"
        region: "us-east-1"
        key_name: "{{ aws_instance_key_name }}"
        instance_type: "{{ instance_size }}"
        # Ubuntu 14.04 AWS stock image
        image: "ami-d05e75b8"
        wait: true
        # The count prevents more than 1 instances from running at once.
        exact_count: 1
        count_tag:
          Name: GRITS-train-classifier
        instance_tags:
          Name: GRITS-train-classifier
        volumes:
         - device_name: /dev/sda1
           device_type: gp2
           volume_size: 220
           delete_on_termination: true
      register: ec2
      tags:
        - always
    - name: Add all instance public IPs to host group
      add_host: hostname="{{ item.public_ip }}" ansible_ssh_user="ubuntu" groups=ec2hosts
      with_items: ec2.tagged_instances
      tags:
        - always
    - name: Wait for the instances to boot by checking the ssh ports
      wait_for: host={{item.public_ip}} port=22 delay=6 timeout=320 state=started
      with_items: ec2.tagged_instances
      tags:
        - always
  vars_files:
    - secure.yml
    - my_secure.yml

- hosts: ec2hosts
  pre_tasks:
    - name: Creating file at root to identify server type
      file: path=dev state=touch
  vars:
    - grits_api_git_version: plant-diseases
    - s3_mongo_import_directory: proddump
    - s3_dump_directory: devdump
    - run_cron_jobs: False
    - diagnose_on_launch: False
    - elasticsearch_plugin_marvel_version: 1.0.2
    - domain: grits-dev.ecohealth.io
    - public_url: "https://{{ domain }}"
    - dev: True
    - skip_geonames: True
    - disable_postfix: True
  roles:
    - { role: ansible-swapfile, swapfile_size: 8GB, swapfile_path: "/swapfile", sudo: yes, sudo_user: "root", tags: ["swapfile"] }
    - common
    - apache
    - mongodb
    - node
    - s3restore
    - { role: grits-api, tags: ["gritsapi"] }
    - { role: train, tags: ["train"] }
    - download-classifier
    - { role: jvm-nlp, tags: ["jvmnlp"] }
    - { role: diagnostic-dashboard, tags: ["dashboard"] }
  post_tasks:
    - name: Shut down the instance in one hour (to cancel use shutdown -c)
      command: "shutdown -h +60"
      sudo: True
      async: 3660
      poll: 0
  vars_files:
    - secure.yml
  sudo: yes
