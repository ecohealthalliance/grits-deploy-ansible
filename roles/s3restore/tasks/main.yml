---

- name: Install aws client application
  apt: name=awscli
  tags: s3-restore

- name: Create aws crendentials directory
  file: path={{ grits_user_home }}/.aws state=directory owner={{ grits_user }} group={{ grits_group }}
  tags: s3-restore
  when: girder_data_access_key is defined

- name: Create aws credentials
  template: src=config.j2 dest={{ grits_user_home }}/.aws/config owner={{ grits_user }} group={{ grits_group }}
  tags: s3-restore
  when: girder_data_access_key is defined

- name: Create database dump directory
  file: path={{ grits_user_home }}/dump state=directory owner={{ grits_user }} group={{ grits_group }}
  tags: s3-restore
  when: girder_data_access_key is defined

- name: Count girder items. The database is only restored if there are no items or restore_database is defined.
  command: 'mongo --host {{ mongo_host }} girder --eval "db.item.count()" --quiet'
  register: girder_items

- name: Update girder data from s3
  command: aws s3 sync s3://girder-data/{{ s3_mongo_import_directory }} {{ grits_user_home }}/dump
  args:
    creates: "{{ grits_user_home }}/dump/girder"
  become_user: "{{ grits_user }}"
  register: s3_data_dumped
  when: girder_data_access_key is defined and (girder_items.stdout == "0" or restore_database)
  tags: s3-restore

- name: Import girder data from dump
  command: mongorestore {{ grits_user_home }}/dump --drop
  when: s3_data_dumped.changed
  tags: s3-restore
